<?xml version="1.0" encoding="UTF-8"?>

<!--
major props to http://www.tomjowitt.co.uk/2011/07/21/streamlined-php-development-part-iii/

only tested on lampp
 TODO add full git & svn support

Requires PEAR & Phing
(found on lampp - setting PATH to pear location instead of php.ini include_path)

if channel-discover for phing is borked: 

pear upgrade –force Console_Getopt 
pear upgrade –force pear 
pear upgrade-all

Also requires:

pear install http_request2

pear install VersionControl_Git or pear install "channel://pear.php.net/VersionControl_Git-0.4.4"

if install borked:
see: http://stackoverflow.com/questions/4483317/failed-opening-required-http-request2-php-include-path-c-php5-pear
-->

<project name="Build a WordPress Install" 
	default="help">

    <!-- Load the configuration file -->
    <property file="build.properties" />
    
    <!-- set a static prop -->
    <property name="build.dir.tmp.plugins" value="${build.dir.tmp}/plugins"/>

	<tstamp>
		<!-- Format is, e.g. Sat, 03 Oct 2009, 16:31 -->
		<format property="buildtime" pattern="%a, %d %b %Y, %H:%M"/>
	</tstamp>
	
    <!-- Clean the build directory -->
    <target name="clean" 
		description="Deletes previous WordPress install directory">
		
        <echo msg="Cleaning build directory" />
        
        <!-- remove htdoc location -->
        <delete dir="${build.dir.wp}" includeemptydirs="true" failonerror="true" />
        
        <!-- remove temp location -->
        <delete dir="${build.dir.tmp}" includeemptydirs="true" failonerror="true" />
        
    </target>

    <!-- Prepare the build directory -->
    <target name="prepare" 
		depends="clean" 
		description="Creating new WordPress directory">
		
        <echo msg="Preparing build directory" />
        
        <!-- create our htdoc location -->
        <mkdir dir="${build.dir.wp}" />
        
        <!-- TODO - what about appending the vhosts conf? -->
        
        <!-- create temp directories for downloads -->
        <mkdir dir="${build.dir.tmp}" />
        <mkdir dir="${build.dir.tmp.plugins}" />
        
    </target>
    
    <!-- Download WordPress from .org -->
	<target name="installwordpress" 
		description="Download WordPress">
				
		<!-- download our wordpress zip -->
		<httpget url="${build.download.wp.url}" dir="${build.dir.tmp}" />
		
		<!-- unzip wordpress - unable to extract to same dir -->
		<untar todir="${build.dir.tmp.plugins}" >
			<fileset dir="${build.dir.tmp}">
				<include name="*.tar.gz"/>
			</fileset>
		</untar>
		
<!-- TODO - regex on filename for tar/zip and check
		<unzip todir="${build.dir.tmp.plugins}" >
			<fileset dir="${build.dir.tmp}">
				<include name="*.zip"/>
			</fileset>
		</unzip>
-->
			
		<!-- move to dest - hopefully the htdocs -->
		<copy todir="${build.dir.wp}" includeemptydirs="true">
		
			<fileset dir="${build.dir.tmp.plugins}/wordpress" >
			  <include name="**" />
			</fileset>
  
		</copy>

    </target>

    <!-- Download WordPress Plugins .org -->
	<target name="downloadplugin" 
		description="Download WordPress Plugin">
		
		<!-- download our plugin zip :: note this expects a standard wordpress packaged plugin file -->
		<httpget url="${wppluginurl}" dir="${build.dir.tmp.plugins}" />
		
    </target>
    
    <!-- fetch wordpress git repo - which syncs with wp svn org 
//gitclose
//gitexport(archive)
    -->
    <target name="fetchgit" 
		description="Fetch the source code">
    
        <echo msg="Grabbing WordPress source from github ..." />

        <!-- Clone repository -->
        <gitclone repository="${build.downoad.wp.git}"
                  targetPath="${build.dir.wp}" />

        <!-- Cleanup repository-->
        <gitgc repository="${build.dir.wp}"
               aggressive="true"
               prune="1.week.ago" />
    </target>
    
    <!-- Update the wp source code from git repo-->
    <target name="pullgit" 
		description="Update the source code">
		
        <echo msg="Updating WordPress source from github ..." />

        <!-- pull from all remotes -->
        <gitpull repository="${build.dir.wp}" all="true" />

    </target>
    
    <!-- we need wp.org svn's here as well
//svnexport
//svncheckout
-->


	<!-- this task will loop over properties list of wp plugins to install -->
	<target name="installplugins" 
		description="Download Plugins" >
		
		<!-- TODO - add a file of newline delimited plugin urls -->
		
		<!-- defined via properties file -->
		<foreach list="${build.download.plugin.urls}" param="wppluginurl" target="downloadplugin" />
		
		<!-- unzip our collection of plugins -->
		<unzip todir="${build.dir.wp}/wp-content/plugins" >
			<fileset dir="${build.dir.tmp.plugins}">
				<include name="*.zip"/>
			</fileset>
		</unzip>
		
		<!-- clean up zip files -->
		<delete>
			<fileset dir="${build.dir.tmp.plugins}">
				<include name="*.zip"/>
			</fileset>
		</delete>
			
	</target>
	
	<target name="updatewpconfig">

		<!-- append additional settings to wp-config.php file -->
		<if>
			<isset property="build.wp.config.db.name"/>
			<then>
			
				<echo msg="Adding db connection info to wp-config.php" />
				
				<reflexive file="${build.dir.wp}/wp-config.php">
					<filterchain>
						<replaceregexp>
							<regexp pattern="(define\('DB_NAME', ')\w+('\);)" replace="\1${build.wp.config.db.name}\2"/>
							<regexp pattern="(define\('DB_USER', ')\w+('\);)" replace="\1${build.wp.config.db.user}\2"/>
							<regexp pattern="(define\('DB_PASSWORD', ')\w+('\);)" replace="\1${build.wp.config.db.password}\2"/>
							<regexp pattern="(define\('DB_HOST', ')\w+('\);)" replace="\1${build.wp.config.db.host}\2"/>
						</replaceregexp>
					</filterchain>
				</reflexive>

			</then>
		</if>
						  
		<!-- append additional settings to wp-config.php file -->
		<if>
			<isset property="build.wp.config.append.filename"/>
			<then>
				
				<echo msg="Adding external configs to wp-config.php" />
				
				<!-- a token exists around the salt keys - lets find/replace/add for next step - hookie -->
				<reflexive file="${build.dir.wp}/wp-config.php">
					<filterchain>
						<replaceregexp>
							<regexp pattern="(\/**#@-*\/)" replace="\1 ${line.separator}${line.separator} #!${build.wp.config.append.filename}!##"/>
						</replaceregexp>
					</filterchain>
				</reflexive>
				
			</then>
		</if>
	  
		<!-- enable debug mode to wp-config.php file -->
		<if>
			<isset property="build.wp.config.debug"/>
			<then>
				
				<echo msg="Setting WP_DEBUG to true in wp-config.php" />
				
				<reflexive file="${build.dir.wp}/wp-config.php">
					<filterchain>
						<replaceregexp>
							<regexp pattern="(define\('WP_DEBUG', )\w+(\);)" replace="\1true\2"/>
						</replaceregexp>
					</filterchain>
				</reflexive>
				
			</then>
		</if>		
				  
		<!-- replace the wp_ db prefix -->
		<if>
			<isset property="build.wp.config.db.prefix"/>
			<then>
				
				<echo msg="Adding db prefix to wp-config.php" />
				
				<reflexive file="${build.dir.wp}/wp-config.php">
					<filterchain>
						<replaceregexp>
							<regexp pattern="((\w+)  = 'wp_';)" replace="\2 = '${build.wp.config.db.prefix}';"/>
						</replaceregexp>
					</filterchain>
				</reflexive>
				
			</then>
		</if>
		
		<!-- TODO - download salt api https://api.wordpress.org/secret-key/1.1/salt/ and inject - wp-config already contains tokens around salt section -->
		
		<!-- TODO - we could download a lang here and change wplang settings -->
		
		
		<!-- append additional settings to wp-config.php file -->
		<if>
			<isset property="build.wp.config.append.filename"/>
			<then>
				
				<echo msg="Appending ${build.wp.config.append.filename} to wp-config.php" />
				
				<reflexive file="${build.dir.wp}/wp-config.php">
					<filterchain>
						<replacetokenswithfile begintoken="#!" endtoken="##" />
					</filterchain>
				</reflexive>
				
			</then>
		</if>
		
	</target>
	
	<!-- our main installer -->
	<target name="install" 
		depends="prepare">
		
		<!-- if this is a standard wordpress.org build, development git or svn -->
		<if>
			<equals arg1="${build.wp.type}" arg2="git" />
			<then>
				<phingcall target="fetchgit" />
			</then>
			<else>
				<phingcall target="installwordpress" />
			</else>
		</if>
				
		<echo msg="Copying wp-config.php" />
		
		<copy file="${build.dir.wp}/wp-config-sample.php" tofile="${build.dir.wp}/wp-config.php" />
		
		<!-- overwrite values in wp-config.php -->
		<phingcall target="updatewpconfig" />
		
		<!-- install additional wp plugins -->
		<if>
			<isset property="build.download.plugin.urls"/>
			<then>
		
				<phingcall target="installplugins" />
				
			</then>
		</if>
		
        <!-- think about permissions - every system is different - use conditional on builtin prop os.name -->
<!--
        <chown file="${build.dir.wp}" user="www-data.www-data" verbose="true" />
        <chmod file="${build.dir.wp}" mode="0755" verbose="true" />
-->    
        <!-- just a timestamp in wp-config.php -->
        <append destFile="${build.dir.wp}/wp-config.php" text="${line.separator}${line.separator}/* Phing Built this install on ${buildtime} */${line.separator}" />
	
		
		<!-- TODO - possible to go one step more with custom install.php file; move it to wordpress then use httpget on install.php -->
	
	
	
	</target>


    <!-- Display the available options -->
    <target name="help" 
		description="Displays the available options">
		
        <echo msg="Build options" />
        <echo msg="------------------" />
        
        <echo msg="$ phing install - Download and install WordPress and Plugins" />
		<!-- <echo msg="$ phing install-wp-org.xml pullgit - Pull/Update existing WordPress install from git" /> -->
        <echo msg="$ phing install help - Displays the available options" />
        
    </target>

</project>
